You are given the root of a binary tree containing digits from 0 to 9 only.

Each root-to-leaf path in the tree represents a number.

For example, the root-to-leaf path 1 -> 2 -> 3 represents the number 123.
Return the total sum of all root-to-leaf numbers. Test cases are generated so that the answer will fit in a 32-bit integer.

A leaf node is a node with no children.

 # Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isLeaf(self, root: TreeNode) -> bool:
        return root.left is None and root.right is None

    def listNumbers(self, root: TreeNode) -> list[str]:
        
        if self.isLeaf(root):
            return [str(root.val)]

        lst_num = []

        if not root.left  is None: lst_num += self.listNumbers(root.left )
        if not root.right is None: lst_num += self.listNumbers(root.right)

        return list(map(lambda x: str(root.val) + x, lst_num))
        

    def sumNumbers(self, root: Optional[TreeNode]) -> int:
        return sum(map(lambda i: int(i), self.listNumbers(root)))
